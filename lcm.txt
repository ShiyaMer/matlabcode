format short
clear all
clc
cost=[2 7 4;3 3 1;5 5 4;1 6 2];
A=[5 8 7 14]; %supply
B=[7 9 18]; %demand
if sum(A)==sum(B)
    fprintf('Given Transportation problem is balanced\n');
else
     fprintf('Given Transportation problem is unbalanced\n');

  if sum(A)<sum(B)
      cost(end+1,:)=zeros(1,size(A,2));
      A(end+1)=sum(B)-sum(A);
  elseif sum(B)<sum(A)
      cost(:,end+1)=zeros(1,size(A,2));
      B(end+1)=sum(B)-sum(A);
  end
end
ICost=cost
X=zeros(size(cost))   % Initialize allocation
[m,n]=size(cost)      % Finding No. of rows and columns
BFS=m+n-1             % Total No. of BFS
%% Finding the cell(with minimum cost) for the allocations
for i=1:size(cost,1)
    for j=1:size(cost,2)
hh=min(cost(:))   % Finding minimum cost value
[Row_index, Col_index]=find(hh==cost)  % Finding position of minimum cost cell
x11=min(A(Row_index),B(Col_index))
[Value,index]=max(x11)            % Find maximum allocation
ii=Row_index(index)       % Identify Row Position
jj=Col_index(index)        % Identify Column Position
y11=min(A(ii),B(jj))        % Find the value
X(ii,jj)=y11
A(ii)=A(ii)-y11
B(jj)=B(jj)-y11
Cost(ii,jj)=Inf
    end
end
%% Print the initial BFS
fprintf('Initial BFS =\n')
IBFS=array2table(X)
disp(IBFS)
%% Check for Degenerate and Non Degenerate
TotalBFS=length(nonzeros(X))
if TotalBFS==BFS
    fprintf('Initial BFS is Non-Degenerate \n')
else
    fprintf('Initial BFS is Degenerate \n')
end
%% Compute the Initial Transportation cost
InitialCost=sum(sum(ICost.*X))
fprintf('Initial BFS Cost is = %d \n',InitialCost)
